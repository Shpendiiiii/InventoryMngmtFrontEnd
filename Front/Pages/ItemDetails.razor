@page "/ItemDetails/{id:int}"
@using BlazorApp2.Models
@using System.Net.Http.Json;

@inject HttpClient Http
<div class="d-flex justify-content-between align-items-center">
    <h3>Item Details</h3>
    <button @onclick="() => EditItem()" class="btn btn-success " type="button" title="Edit">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square d-inline-block" viewBox="0 0 16 16">
            <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
            <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z" />
        </svg>
        <p class="d-inline-block p-0 m-0">Edit</p>
    </button>
</div>

@if (item == null)
{
    <p>Not found</p>
}
else
{
    <div class="mx-auto text-center" style="width: 320px;">
        <!-- Display item details here -->
        @if (!string.IsNullOrEmpty(item.Image))
        {
            <img src="@item.Image" width="320" alt="No resource found" />
        }
        else
        {
            <span>No image available</span>
        }
        <p class=""><mark>@item.Manufacturer @item.ModelName @item.ModelYear</mark></p>
        <p>MSRP: <strong>@item.Price</strong> Euros</p>
        <p>@item.Description</p>
        <p><abbr title="HyperText Markup Language" class="initialism">Currently in stock: @item.Quantity</abbr></p>

    </div>
}

@if (isEditing)
{
    <div>
        <input @bind=item2.Manufacturer />
        <input @bind=item2.Image placeholder="Enter image url"/>
        <button @onclick="SubmitChanges">Submit</button>
    </div>
}

@code {

    [Parameter]
    public int Id { get; set; }

    private Item item;

    private string httpsLocalhostApiItems = "https://localhost:44345/api/items";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            item = await Http.GetFromJsonAsync<Item>($"{httpsLocalhostApiItems}/id?id={Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine("The request looked like this: " + $"httpsLocalhostApiItems/id?id={Id}");
            Console.WriteLine("Error getting record: " + ex);
        }
    }


    private bool isEditing = false;
    private Item item2;

    private void EditItem()
    {
        isEditing = true;
        item2 = new Item
            {
                _id = item._id,
                ModelName = item.ModelName,
                Manufacturer = item.Manufacturer,
                ModelYear = item.ModelYear,
                Description = item.Description,
                Price = item.Price,
                Quantity = item.Quantity,
                Image = item.Image,
            };
    }

    private async void SubmitChanges()
    {
        item = item2;
        isEditing = false;
        await UpdateItemAsync(item);
    }

    private async Task UpdateItemAsync(Item itemToUpdate)
    {
        var response = await Http.PutAsJsonAsync<Item>($"{httpsLocalhostApiItems}/{itemToUpdate._id}", itemToUpdate);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Successful");
        }
        else
        {
            Console.WriteLine("Not successful");
        }
    }

}