@page "/items"

@using System.Net.Http
@using System.Net.Http.Json
@using System.Text
@using System.Text.Json
@using BlazorApp2.Models
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<style>
.bottom-right-element{
 position: relative;
    bottom: 0;
    right: 0;
    /*background-color: #007bff;*/
    /*color: white;*/
    /*padding: 5px 10px;*/
    }
table {
  font-family: arial, sans-serif;
  border-collapse: collapse;
  width: 100%;
}

td, th {
  border: 1px solid #dddddd;
  text-align: left;
  padding: 8px;
}

tr:nth-child(even) {
  background-color: #dddddd;
}

.centered-td {
    display: flex;
    justify-content: center;
    align-items: center;
}

    .layout {
        
        height: 250px;
        display: grid;
        grid-template-rows: repeat(3, 1fr);
        grid-template-columns: repeat(3, 1fr);
        gap: 8px;
        align-items: center;
    }

   
       .success {
            background-color: green;
            color: white;
            display: block;
            position: fixed;
            top: 10px;
            right: 10px;
            z-index: 100;
            padding: 10px;
            border-radius: 5px;
            font-size: 16px;
            transition: all 0.5s ease;
        /*display: none;*/
        }

        .error {
            background-color: red;   
             color: white;
            display: block;
            position: fixed;
            top: 10px;
            right: 10px;
            z-index: 100;
            padding: 10px;
            border-radius: 5px;
            font-size: 16px;
            transition: all 0.5s ease;
            display: block;
        }
        .hidden{
            display: none;
        }

 
</style>

<div>

    <form method="post" @onsubmit="HandleFormSubmit">
        <fieldset>
            <legend>Enter a record</legend>
            <div class="layout">
                <div>
                    <label for="inputText">Manufacturer:</label>
                    <input type="text" @bind="manufacturer" class="form-control" id="manufacturer" name="inputText" placeholder="Type something..."/>
                </div>
                <div>
                    <label for="inputText">Model Name:</label>
                    <input type="text" @bind="modelName" class="form-control" id="modelName" name="modelName" placeholder="Type something..."/>
                </div>
                <div>
                    <label for="inputText">Model Year:</label>
                    <input type="number" @bind="modelYear" class="form-control" id="modelYear" name="inputText" placeholder="Type something..."/>
                </div>
                <div>
                    <label for="inputText">Description:</label>
                    <InputTextArea type="text" @bind-Value="desc" class="form-control" id="desc" name="inputText" placeholder="Type something..."/>
                </div>
                <div>
                    <label for="inputText">Price:</label>
                    <input @bind="price" type="number" step="0.01" pattern="\d+(\.\d{1,2})?" class="form-control" id="price" name="inputText" placeholder="Type something..."/>
                </div>
                <div>
                    <label for="inputText">Quantity: </label>
                    <input type="text" @bind="quan" class="form-control" id="quan" name="inputText" placeholder="Type something..."/>
                </div>
                <div>
                    <label for="inputText">Image link: </label>
                    <input type="text" @bind="imgLink" class="form-control" id="imgLink" name="inputText" placeholder="Type something..."/>
                </div>
                <div class="bottom-right-element">
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>

            </div>
        </fieldset>

    </form>
    <table>

        <tr>
            <th>Manufacturer</th>
            <th>Model Name</th>
            <th>Description</th>
            <th>Price</th>
            <th>Quantity</th>
            <th>Image</th>
        </tr>

        @foreach (var item in items)
        {
            <tr id="@item._id" @onclick="() => ShowDocId(item._id)">
                <td>@item.Manufacturer</td>
                <td>@item.ModelName</td>
                <td>@item.Description</td>
                <td>@item.Price</td>
                <td>@item.Quantity</td>
                <td class="centered-td">
                    @if (!string.IsNullOrEmpty(item.Image))
                    {
                        <img src="@item.Image" width="90" alt="No resource found"/>
                    }
                    else
                    {
                        <span>No image available</span>
                    }
                </td>
            </tr>
        }


    </table>
    <button @onclick="() => DeleteSelectedItems()">DELETE</button>
    <button @onclick="() => ResetDelete()">Reset</button>
    <div id="notification" class="hidden">
        <span>Item added</span>
    </div>

    <div id="error" class="hidden">
        <span>An error ocurred!</span>
    </div>

    <br/>
</div>


@code{

    private List<int> ToBeDeleted = new List<int>();

    void ShowDocId(int id)
    {
        Console.WriteLine("Elem id" + id);
        if (ToBeDeleted.Contains(id))
        {
            return;
        }
        ToBeDeleted.Add(id);
        JSRuntime.InvokeVoidAsync("setBackground", id);
    }

    private void ResetDelete()
    {
        foreach (var elem in ToBeDeleted)
        {
            JSRuntime.InvokeVoidAsync("revertBackground", elem);
        }
        ToBeDeleted.Clear();
    }

    private async Task DeleteSelectedItems()
    {
        if (ToBeDeleted.Count > 0)
        {
            var queryString = string.Join("&", ToBeDeleted.Select(id => $"itemIds={id}"));
            var response = await HttpClient.DeleteAsync($"{httpsLocalhostApiItems}/delete?{queryString}");

            if (response.IsSuccessStatusCode)
            {
                items.RemoveAll(i => ToBeDeleted.Contains(i._id));
                ToBeDeleted.Clear();
            }
            else
            {
                var statusCode = (int)response.StatusCode;

                // Extract the response content as a string (if needed)
                var responseContent = await response.Content.ReadAsStringAsync();

                // Handle the error, e.g., display an error message
                Console.WriteLine($"HTTP Status Code: {statusCode}");
                Console.WriteLine($"Error Response Content: {responseContent}");
                await JSRuntime.InvokeVoidAsync("showNotifE");
                await Task.Delay(5000);
                await JSRuntime.InvokeVoidAsync("hideNotifE");
            }
        }
    }

}

@code{
    private string imgLink;
    private List<Item>? items = new List<Item>();
    private string httpsLocalhostApiItems = "https://localhost:44345/api/items";

    protected override async Task OnInitializedAsync()
    {
        items = await HttpClient.GetFromJsonAsync<List<Item>>(httpsLocalhostApiItems);
    }

    // To store the user input
    private string manufacturer;
    private string modelName;
    private int modelYear;
    private string desc;
    private int quan;
    private double price;


    private async Task HandleFormSubmit()
    {
        Console.WriteLine($"User input: {desc}");
        Random random = new Random();

    // Generate a random Int32 value
        int randomNumber = random.Next();
        var userInputObject = new
        {
            _id = randomNumber,
            ModelName = modelName,
            Manufacturer = manufacturer,
            ModelYear = modelYear,
            Description = desc,
            Price = price,
            Quantity = quan,
            Image = imgLink,
        };
        var jsonContent = new StringContent(JsonSerializer.Serialize(userInputObject), Encoding.UTF8, "application/json");


        var response = await HttpClient.PostAsync(httpsLocalhostApiItems, jsonContent);

        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            items = await HttpClient.GetFromJsonAsync<List<Item>>(httpsLocalhostApiItems);
    // Handle the response content as 
            Console.WriteLine($"Response Content: {responseContent}");
            await JSRuntime.InvokeVoidAsync("showNotif");
        }
        else
        {
    // The request encountered an error (non-successful status code)

    // Get the HTTP status code
            var statusCode = (int)response.StatusCode;

    // Extract the response content as a string (if needed)
            var responseContent = await response.Content.ReadAsStringAsync();

    // Handle the error, e.g., display an error message
            Console.WriteLine($"HTTP Status Code: {statusCode}");
            Console.WriteLine($"Error Response Content: {responseContent}");
            await JSRuntime.InvokeVoidAsync("showNotifE");
            await Task.Delay(5000);
            await JSRuntime.InvokeVoidAsync("hideNotifE");
        }

        manufacturer = string.Empty;
        modelName = string.Empty;
        modelYear = 0;
        desc = string.Empty;
        price = 0;
        quan = 0;
        await Task.Delay(4000);
        await JSRuntime.InvokeVoidAsync("hideNotification");
    }


}